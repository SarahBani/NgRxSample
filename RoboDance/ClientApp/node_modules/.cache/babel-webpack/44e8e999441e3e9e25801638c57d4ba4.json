{"ast":null,"code":"import _createForOfIteratorHelper from \"H:/Project/Parkside/RoboDance/RoboDance/ClientApp/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _createClass from \"H:/Project/Parkside/RoboDance/RoboDance/ClientApp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"H:/Project/Parkside/RoboDance/RoboDance/ClientApp/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"H:/Project/Parkside/RoboDance/RoboDance/ClientApp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _classCallCheck from \"H:/Project/Parkside/RoboDance/RoboDance/ClientApp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"H:/Project/Parkside/RoboDance/RoboDance/ClientApp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"H:/Project/Parkside/RoboDance/RoboDance/ClientApp/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Injectable, InjectionToken, Inject, Injector } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Store, createSelector, ActionsSubject, ReducerManager, INITIAL_STATE, setNgrxMockEnvironment, StateObservable } from '@ngrx/store';\nimport { TestBed } from '@angular/core/testing';\n/**\n * @fileoverview added by tsickle\n * Generated from: mock_state.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @template T\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@ngrx/store';\n\nvar MockState = /*#__PURE__*/function (_BehaviorSubject) {\n  _inherits(MockState, _BehaviorSubject);\n\n  var _super = _createSuper(MockState);\n\n  function MockState() {\n    _classCallCheck(this, MockState);\n\n    return _super.call(this,\n    /** @type {?} */\n    {});\n  }\n\n  return MockState;\n}(BehaviorSubject);\n\nMockState.ɵfac = function MockState_Factory(t) {\n  return new (t || MockState)();\n};\n\nMockState.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: MockState,\n  factory: MockState.ɵfac\n});\n/** @nocollapse */\n\nMockState.ctorParameters = function () {\n  return [];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MockState, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: tokens.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar MOCK_SELECTORS = new InjectionToken('@ngrx/store Mock Selectors');\n/**\n * @fileoverview added by tsickle\n * Generated from: mock_store.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nif (typeof afterEach === 'function') {\n  afterEach(\n  /**\n  * @return {?}\n  */\n  function () {\n    try {\n      /** @type {?} */\n      var mockStore = TestBed.inject(MockStore);\n\n      if (mockStore) {\n        mockStore.resetSelectors();\n      }\n    } catch (_a) {}\n  });\n}\n/**\n * @template T\n */\n\n\nvar MockStore = /*#__PURE__*/function (_Store) {\n  _inherits(MockStore, _Store);\n\n  var _super2 = _createSuper(MockStore);\n\n  /**\n   * @param {?} state$\n   * @param {?} actionsObserver\n   * @param {?} reducerManager\n   * @param {?} initialState\n   * @param {?=} mockSelectors\n   */\n  function MockStore(state$, actionsObserver, reducerManager, initialState) {\n    var _this;\n\n    var mockSelectors = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n\n    _classCallCheck(this, MockStore);\n\n    _this = _super2.call(this, state$, actionsObserver, reducerManager);\n    _this.state$ = state$;\n    _this.initialState = initialState;\n    _this.selectors = new Map();\n\n    _this.resetSelectors();\n\n    _this.setState(_this.initialState);\n\n    _this.scannedActions$ = actionsObserver.asObservable();\n\n    var _iterator = _createForOfIteratorHelper(mockSelectors),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var mockSelector = _step.value;\n\n        _this.overrideSelector(mockSelector.selector, mockSelector.value);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return _this;\n  }\n  /**\n   * @param {?} nextState\n   * @return {?}\n   */\n\n\n  _createClass(MockStore, [{\n    key: \"setState\",\n    value: function setState(nextState) {\n      this.state$.next(nextState);\n      this.lastState = nextState;\n    }\n    /**\n     * @template Selector, Value, Result\n     * @param {?} selector\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"overrideSelector\",\n    value: function overrideSelector(selector, value) {\n      this.selectors.set(selector, value);\n      /** @type {?} */\n\n      var resultSelector = typeof selector === 'string' ? createSelector(\n      /**\n      * @return {?}\n      */\n      function () {},\n      /**\n      * @return {?}\n      */\n      function () {\n        return value;\n      }) : selector;\n      resultSelector.setResult(value);\n      return (\n        /** @type {?} */\n        resultSelector\n      );\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"resetSelectors\",\n    value: function resetSelectors() {\n      var _iterator2 = _createForOfIteratorHelper(this.selectors.keys()),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var selector = _step2.value;\n\n          if (typeof selector !== 'string') {\n            selector.release();\n            selector.clearResult();\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      this.selectors.clear();\n    }\n    /**\n     * @param {?} selector\n     * @param {?=} prop\n     * @return {?}\n     */\n\n  }, {\n    key: \"select\",\n    value: function select(selector, prop) {\n      if (typeof selector === 'string' && this.selectors.has(selector)) {\n        return new BehaviorSubject(this.selectors.get(selector)).asObservable();\n      }\n\n      return _get(_getPrototypeOf(MockStore.prototype), \"select\", this).call(this, selector, prop);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"addReducer\",\n    value: function addReducer() {\n      /* noop */\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"removeReducer\",\n    value: function removeReducer() {\n      /* noop */\n    }\n    /**\n     * Refreshes the existing state.\n     * @return {?}\n     */\n\n  }, {\n    key: \"refreshState\",\n    value: function refreshState() {\n      if (this.lastState) this.setState(Object.assign({}, this.lastState));\n    }\n  }]);\n\n  return MockStore;\n}(Store);\n\nMockStore.ɵfac = function MockStore_Factory(t) {\n  return new (t || MockStore)(ɵngcc0.ɵɵinject(MockState), ɵngcc0.ɵɵinject(ɵngcc1.ActionsSubject), ɵngcc0.ɵɵinject(ɵngcc1.ReducerManager), ɵngcc0.ɵɵinject(INITIAL_STATE), ɵngcc0.ɵɵinject(MOCK_SELECTORS));\n};\n\nMockStore.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: MockStore,\n  factory: MockStore.ɵfac\n});\n/** @nocollapse */\n\nMockStore.ctorParameters = function () {\n  return [{\n    type: MockState\n  }, {\n    type: ActionsSubject\n  }, {\n    type: ReducerManager\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [INITIAL_STATE]\n    }]\n  }, {\n    type: Array,\n    decorators: [{\n      type: Inject,\n      args: [MOCK_SELECTORS]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MockStore, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: MockState\n    }, {\n      type: ɵngcc1.ActionsSubject\n    }, {\n      type: ɵngcc1.ReducerManager\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [INITIAL_STATE]\n      }]\n    }, {\n      type: Array,\n      decorators: [{\n        type: Inject,\n        args: [MOCK_SELECTORS]\n      }]\n    }];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  MockStore.prototype.selectors;\n  /** @type {?} */\n\n  MockStore.prototype.scannedActions$;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MockStore.prototype.lastState;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MockStore.prototype.state$;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MockStore.prototype.initialState;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: mock_reducer_manager.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar MockReducerManager = /*#__PURE__*/function (_BehaviorSubject2) {\n  _inherits(MockReducerManager, _BehaviorSubject2);\n\n  var _super3 = _createSuper(MockReducerManager);\n\n  function MockReducerManager() {\n    _classCallCheck(this, MockReducerManager);\n\n    return _super3.call(this,\n    /**\n    * @return {?}\n    */\n    function () {\n      return undefined;\n    });\n  }\n  /**\n   * @param {?} feature\n   * @return {?}\n   */\n\n\n  _createClass(MockReducerManager, [{\n    key: \"addFeature\",\n    value: function addFeature(feature) {\n      /* noop */\n    }\n    /**\n     * @param {?} feature\n     * @return {?}\n     */\n\n  }, {\n    key: \"addFeatures\",\n    value: function addFeatures(feature) {\n      /* noop */\n    }\n    /**\n     * @param {?} feature\n     * @return {?}\n     */\n\n  }, {\n    key: \"removeFeature\",\n    value: function removeFeature(feature) {\n      /* noop */\n    }\n    /**\n     * @param {?} features\n     * @return {?}\n     */\n\n  }, {\n    key: \"removeFeatures\",\n    value: function removeFeatures(features) {\n      /* noop */\n    }\n    /**\n     * @param {?} key\n     * @param {?} reducer\n     * @return {?}\n     */\n\n  }, {\n    key: \"addReducer\",\n    value: function addReducer(key, reducer) {\n      /* noop */\n    }\n    /**\n     * @param {?} reducers\n     * @return {?}\n     */\n\n  }, {\n    key: \"addReducers\",\n    value: function addReducers(reducers) {\n      /* noop */\n    }\n    /**\n     * @param {?} featureKey\n     * @return {?}\n     */\n\n  }, {\n    key: \"removeReducer\",\n    value: function removeReducer(featureKey) {\n      /* noop */\n    }\n    /**\n     * @param {?} featureKeys\n     * @return {?}\n     */\n\n  }, {\n    key: \"removeReducers\",\n    value: function removeReducers(featureKeys) {\n      /* noop */\n    }\n  }]);\n\n  return MockReducerManager;\n}(BehaviorSubject);\n\nMockReducerManager.ɵfac = function MockReducerManager_Factory(t) {\n  return new (t || MockReducerManager)();\n};\n\nMockReducerManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: MockReducerManager,\n  factory: MockReducerManager.ɵfac\n});\n/** @nocollapse */\n\nMockReducerManager.ctorParameters = function () {\n  return [];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MockReducerManager, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: testing.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @record\n * @template T\n */\n\n\nfunction MockStoreConfig() {}\n\nif (false) {\n  /** @type {?|undefined} */\n  MockStoreConfig.prototype.initialState;\n  /** @type {?|undefined} */\n\n  MockStoreConfig.prototype.selectors;\n}\n/**\n * \\@description\n * Creates mock store providers.\n *\n * \\@usageNotes\n *\n * **With `TestBed.configureTestingModule`**\n *\n * ```typescript\n * describe('Books Component', () => {\n *   let store: MockStore;\n *\n *   beforeEach(() => {\n *     TestBed.configureTestingModule({\n *       providers: [\n *         provideMockStore({\n *           initialState: { books: { entities: [] } },\n *           selectors: [\n *             { selector: selectAllBooks, value: ['Book 1', 'Book 2'] },\n *             { selector: selectVisibleBooks, value: ['Book 1'] },\n *           ],\n *         }),\n *       ],\n *     });\n *\n *     store = TestBed.inject(MockStore);\n *   });\n * });\n * ```\n *\n * **With `Injector.create`**\n *\n * ```typescript\n * describe('Counter Component', () => {\n *   let injector: Injector;\n *   let store: MockStore;\n *\n *   beforeEach(() => {\n *     injector = Injector.create({\n *       providers: [\n *         provideMockStore({ initialState: { counter: 0 } }),\n *       ],\n *     });\n *     store = injector.get(MockStore);\n *   });\n * });\n * ```\n * @template T\n * @param {?=} config `MockStoreConfig<T>` to provide the values for `INITIAL_STATE` and `MOCK_SELECTORS` tokens.\n * By default, `initialState` and `selectors` are not defined.\n * @return {?} Mock store providers that can be used with both `TestBed.configureTestingModule` and `Injector.create`.\n *\n */\n\n\nfunction provideMockStore() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  setNgrxMockEnvironment(true);\n  return [{\n    provide: ActionsSubject,\n    useFactory:\n    /**\n    * @return {?}\n    */\n    function useFactory() {\n      return new ActionsSubject();\n    },\n    deps: []\n  }, {\n    provide: MockState,\n    useFactory:\n    /**\n    * @return {?}\n    */\n    function useFactory() {\n      return new MockState();\n    },\n    deps: []\n  }, {\n    provide: MockReducerManager,\n    useFactory:\n    /**\n    * @return {?}\n    */\n    function useFactory() {\n      return new MockReducerManager();\n    },\n    deps: []\n  }, {\n    provide: INITIAL_STATE,\n    useValue: config.initialState || {}\n  }, {\n    provide: MOCK_SELECTORS,\n    useValue: config.selectors\n  }, {\n    provide: StateObservable,\n    useExisting: MockState\n  }, {\n    provide: ReducerManager,\n    useExisting: MockReducerManager\n  }, {\n    provide: MockStore,\n    useFactory: mockStoreFactory,\n    deps: [MockState, ActionsSubject, ReducerManager, INITIAL_STATE, MOCK_SELECTORS]\n  }, {\n    provide: Store,\n    useExisting: MockStore\n  }];\n}\n/**\n * @template T\n * @param {?} mockState\n * @param {?} actionsSubject\n * @param {?} reducerManager\n * @param {?} initialState\n * @param {?} mockSelectors\n * @return {?}\n */\n\n\nfunction mockStoreFactory(mockState, actionsSubject, reducerManager, initialState, mockSelectors) {\n  return new MockStore(mockState, actionsSubject, reducerManager, initialState, mockSelectors);\n}\n/**\n * \\@description\n * Creates mock store with all necessary dependencies outside of the `TestBed`.\n *\n * \\@usageNotes\n *\n * ```typescript\n * describe('Books Effects', () => {\n *   let store: MockStore;\n *\n *   beforeEach(() => {\n *     store = getMockStore({\n *       initialState: { books: { entities: ['Book 1', 'Book 2', 'Book 3'] } },\n *       selectors: [\n *         { selector: selectAllBooks, value: ['Book 1', 'Book 2'] },\n *         { selector: selectVisibleBooks, value: ['Book 1'] },\n *       ],\n *     });\n *   });\n * });\n * ```\n * @template T\n * @param {?=} config `MockStoreConfig<T>` to provide the values for `INITIAL_STATE` and `MOCK_SELECTORS` tokens.\n * By default, `initialState` and `selectors` are not defined.\n * @return {?} `MockStore<T>`\n *\n */\n\n\nfunction getMockStore() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  /** @type {?} */\n  var injector = Injector.create({\n    providers: provideMockStore(config)\n  });\n  return injector.get(MockStore);\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: ngrx-store-testing.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { MockReducerManager, MockState, MockStore, getMockStore, provideMockStore, MOCK_SELECTORS as ɵa };","map":{"version":3,"sources":["../../../../modules/store/testing/src/mock_state.ts","../../../../modules/store/testing/src/tokens.ts","../../../../modules/store/testing/src/mock_store.ts","../../../../modules/store/testing/src/mock_reducer_manager.ts","../../../../modules/store/testing/src/testing.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable()\nexport class MockState<T extends {}> extends BehaviorSubject<T> {\n  constructor() {\n    super(<T>{});\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const MOCK_SELECTORS = new InjectionToken('@ngrx/store Mock Selectors');\n","import { Inject, Injectable } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport {\n  Action,\n  ActionsSubject,\n  INITIAL_STATE,\n  ReducerManager,\n  Store,\n  createSelector,\n  MemoizedSelectorWithProps,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { MockState } from './mock_state';\nimport { MockSelector } from './mock_selector';\nimport { MOCK_SELECTORS } from './tokens';\n\nif (typeof afterEach === 'function') {\n  afterEach(() => {\n    try {\n      const mockStore: MockStore | undefined = TestBed.inject(MockStore);\n      if (mockStore) {\n        mockStore.resetSelectors();\n      }\n    } catch {}\n  });\n}\n\ntype OnlyMemoized<T, Result> = T extends string | MemoizedSelector<any, any>\n  ? MemoizedSelector<any, Result>\n  : T extends MemoizedSelectorWithProps<any, any, any>\n  ? MemoizedSelectorWithProps<any, any, Result>\n  : never;\n\ntype Memoized<Result> =\n  | MemoizedSelector<any, Result>\n  | MemoizedSelectorWithProps<any, any, Result>;\n\n@Injectable()\nexport class MockStore<T = object> extends Store<T> {\n  private readonly selectors = new Map<Memoized<any> | string, any>();\n\n  readonly scannedActions$: Observable<Action>;\n  private lastState?: T;\n\n  constructor(\n    private state$: MockState<T>,\n    actionsObserver: ActionsSubject,\n    reducerManager: ReducerManager,\n    @Inject(INITIAL_STATE) private initialState: T,\n    @Inject(MOCK_SELECTORS) mockSelectors: MockSelector[] = []\n  ) {\n    super(state$, actionsObserver, reducerManager);\n    this.resetSelectors();\n    this.setState(this.initialState);\n    this.scannedActions$ = actionsObserver.asObservable();\n    for (const mockSelector of mockSelectors) {\n      this.overrideSelector(mockSelector.selector, mockSelector.value);\n    }\n  }\n\n  setState(nextState: T): void {\n    this.state$.next(nextState);\n    this.lastState = nextState;\n  }\n\n  overrideSelector<\n    Selector extends Memoized<Result>,\n    Value extends Result,\n    Result = Selector extends MemoizedSelector<any, infer T>\n      ? T\n      : Selector extends MemoizedSelectorWithProps<any, any, infer U>\n      ? U\n      : Value\n  >(\n    selector: Selector | string,\n    value: Value\n  ): OnlyMemoized<typeof selector, Result> {\n    this.selectors.set(selector, value);\n\n    const resultSelector: Memoized<Result> =\n      typeof selector === 'string'\n        ? createSelector(\n            () => {},\n            (): Result => value\n          )\n        : selector;\n\n    resultSelector.setResult(value);\n\n    return resultSelector as OnlyMemoized<typeof selector, Result>;\n  }\n\n  resetSelectors() {\n    for (const selector of this.selectors.keys()) {\n      if (typeof selector !== 'string') {\n        selector.release();\n        selector.clearResult();\n      }\n    }\n\n    this.selectors.clear();\n  }\n\n  select(selector: any, prop?: any) {\n    if (typeof selector === 'string' && this.selectors.has(selector)) {\n      return new BehaviorSubject<any>(\n        this.selectors.get(selector)\n      ).asObservable();\n    }\n\n    return super.select(selector, prop);\n  }\n\n  addReducer() {\n    /* noop */\n  }\n\n  removeReducer() {\n    /* noop */\n  }\n\n  /**\n   * Refreshes the existing state.\n   */\n  refreshState() {\n    if (this.lastState) this.setState({ ...this.lastState });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ActionReducer } from '@ngrx/store';\n\n@Injectable()\nexport class MockReducerManager extends BehaviorSubject<\n  ActionReducer<any, any>\n> {\n  constructor() {\n    super(() => undefined);\n  }\n\n  addFeature(feature: any) {\n    /* noop */\n  }\n\n  addFeatures(feature: any) {\n    /* noop */\n  }\n\n  removeFeature(feature: any) {\n    /* noop */\n  }\n\n  removeFeatures(features: any) {\n    /* noop */\n  }\n\n  addReducer(key: any, reducer: any) {\n    /* noop */\n  }\n\n  addReducers(reducers: any) {\n    /* noop */\n  }\n\n  removeReducer(featureKey: any) {\n    /* noop */\n  }\n\n  removeReducers(featureKeys: any) {\n    /* noop */\n  }\n}\n","import {\n  ExistingProvider,\n  FactoryProvider,\n  Injector,\n  ValueProvider,\n} from '@angular/core';\nimport { MockState } from './mock_state';\nimport {\n  ActionsSubject,\n  INITIAL_STATE,\n  ReducerManager,\n  StateObservable,\n  Store,\n  setNgrxMockEnvironment,\n} from '@ngrx/store';\nimport { MockStore } from './mock_store';\nimport { MockReducerManager } from './mock_reducer_manager';\nimport { MockSelector } from './mock_selector';\nimport { MOCK_SELECTORS } from './tokens';\n\nexport interface MockStoreConfig<T> {\n  initialState?: T;\n  selectors?: MockSelector[];\n}\n\n/**\n * @description\n * Creates mock store providers.\n *\n * @param config `MockStoreConfig<T>` to provide the values for `INITIAL_STATE` and `MOCK_SELECTORS` tokens.\n * By default, `initialState` and `selectors` are not defined.\n * @returns Mock store providers that can be used with both `TestBed.configureTestingModule` and `Injector.create`.\n *\n * @usageNotes\n *\n * **With `TestBed.configureTestingModule`**\n *\n * ```typescript\n * describe('Books Component', () => {\n *   let store: MockStore;\n *\n *   beforeEach(() => {\n *     TestBed.configureTestingModule({\n *       providers: [\n *         provideMockStore({\n *           initialState: { books: { entities: [] } },\n *           selectors: [\n *             { selector: selectAllBooks, value: ['Book 1', 'Book 2'] },\n *             { selector: selectVisibleBooks, value: ['Book 1'] },\n *           ],\n *         }),\n *       ],\n *     });\n *\n *     store = TestBed.inject(MockStore);\n *   });\n * });\n * ```\n *\n * **With `Injector.create`**\n *\n * ```typescript\n * describe('Counter Component', () => {\n *   let injector: Injector;\n *   let store: MockStore;\n *\n *   beforeEach(() => {\n *     injector = Injector.create({\n *       providers: [\n *         provideMockStore({ initialState: { counter: 0 } }),\n *       ],\n *     });\n *     store = injector.get(MockStore);\n *   });\n * });\n * ```\n */\nexport function provideMockStore<T = any>(\n  config: MockStoreConfig<T> = {}\n): (ValueProvider | ExistingProvider | FactoryProvider)[] {\n  setNgrxMockEnvironment(true);\n  return [\n    {\n      provide: ActionsSubject,\n      useFactory: () => new ActionsSubject(),\n      deps: [],\n    },\n    { provide: MockState, useFactory: () => new MockState<T>(), deps: [] },\n    {\n      provide: MockReducerManager,\n      useFactory: () => new MockReducerManager(),\n      deps: [],\n    },\n    { provide: INITIAL_STATE, useValue: config.initialState || {} },\n    { provide: MOCK_SELECTORS, useValue: config.selectors },\n    { provide: StateObservable, useExisting: MockState },\n    { provide: ReducerManager, useExisting: MockReducerManager },\n    {\n      provide: MockStore,\n      useFactory: mockStoreFactory,\n      deps: [\n        MockState,\n        ActionsSubject,\n        ReducerManager,\n        INITIAL_STATE,\n        MOCK_SELECTORS,\n      ],\n    },\n    { provide: Store, useExisting: MockStore },\n  ];\n}\n\nfunction mockStoreFactory<T>(\n  mockState: MockState<T>,\n  actionsSubject: ActionsSubject,\n  reducerManager: ReducerManager,\n  initialState: T,\n  mockSelectors: MockSelector[]\n): MockStore<T> {\n  return new MockStore(\n    mockState,\n    actionsSubject,\n    reducerManager,\n    initialState,\n    mockSelectors\n  );\n}\n\n/**\n * @description\n * Creates mock store with all necessary dependencies outside of the `TestBed`.\n *\n * @param config `MockStoreConfig<T>` to provide the values for `INITIAL_STATE` and `MOCK_SELECTORS` tokens.\n * By default, `initialState` and `selectors` are not defined.\n * @returns `MockStore<T>`\n *\n * @usageNotes\n *\n * ```typescript\n * describe('Books Effects', () => {\n *   let store: MockStore;\n *\n *   beforeEach(() => {\n *     store = getMockStore({\n *       initialState: { books: { entities: ['Book 1', 'Book 2', 'Book 3'] } },\n *       selectors: [\n *         { selector: selectAllBooks, value: ['Book 1', 'Book 2'] },\n *         { selector: selectVisibleBooks, value: ['Book 1'] },\n *       ],\n *     });\n *   });\n * });\n * ```\n */\nexport function getMockStore<T>(config: MockStoreConfig<T> = {}): MockStore<T> {\n  const injector = Injector.create({ providers: provideMockStore(config) });\n  return injector.get(MockStore);\n}\n\nexport { MockReducerManager } from './mock_reducer_manager';\nexport { MockState } from './mock_state';\nexport { MockStore } from './mock_store';\nexport { MockSelector } from './mock_selector';\n"]},"metadata":{},"sourceType":"module"}