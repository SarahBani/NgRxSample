{"ast":null,"code":"import _createClass from \"H:/Project/Parkside/RoboDance/RoboDance/ClientApp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"H:/Project/Parkside/RoboDance/RoboDance/ClientApp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license Angular v11.0.9\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\nimport { HttpHeaders, HttpResponse, HttpErrorResponse, HttpEventType, HttpClientModule, HttpBackend } from '@angular/common/http';\nimport { Injectable, NgModule } from '@angular/core';\nimport { Observable } from 'rxjs';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Controller to be injected into tests, that allows for mocking and flushing\n * of requests.\n *\n * @publicApi\n */\n\nimport * as Éµngcc0 from '@angular/core';\n\nvar HttpTestingController = function HttpTestingController() {\n  _classCallCheck(this, HttpTestingController);\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A mock requests that was received and is ready to be answered.\n *\n * This interface allows access to the underlying `HttpRequest`, and allows\n * responding with `HttpEvent`s or `HttpErrorResponse`s.\n *\n * @publicApi\n */\n\n\nvar TestRequest = /*#__PURE__*/function () {\n  function TestRequest(request, observer) {\n    _classCallCheck(this, TestRequest);\n\n    this.request = request;\n    this.observer = observer;\n    /**\n     * @internal set by `HttpClientTestingBackend`\n     */\n\n    this._cancelled = false;\n  }\n  /**\n   * Whether the request was cancelled after it was sent.\n   */\n\n\n  _createClass(TestRequest, [{\n    key: \"flush\",\n\n    /**\n     * Resolve the request by returning a body plus additional HTTP information (such as response\n     * headers) if provided.\n     * If the request specifies an expected body type, the body is converted into the requested type.\n     * Otherwise, the body is converted to `JSON` by default.\n     *\n     * Both successful and unsuccessful responses can be delivered via `flush()`.\n     */\n    value: function flush(body) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (this.cancelled) {\n        throw new Error(\"Cannot flush a cancelled request.\");\n      }\n\n      var url = this.request.urlWithParams;\n      var headers = opts.headers instanceof HttpHeaders ? opts.headers : new HttpHeaders(opts.headers);\n      body = _maybeConvertBody(this.request.responseType, body);\n      var statusText = opts.statusText;\n      var status = opts.status !== undefined ? opts.status : 200;\n\n      if (opts.status === undefined) {\n        if (body === null) {\n          status = 204;\n          statusText = statusText || 'No Content';\n        } else {\n          statusText = statusText || 'OK';\n        }\n      }\n\n      if (statusText === undefined) {\n        throw new Error('statusText is required when setting a custom status.');\n      }\n\n      if (status >= 200 && status < 300) {\n        this.observer.next(new HttpResponse({\n          body: body,\n          headers: headers,\n          status: status,\n          statusText: statusText,\n          url: url\n        }));\n        this.observer.complete();\n      } else {\n        this.observer.error(new HttpErrorResponse({\n          error: body,\n          headers: headers,\n          status: status,\n          statusText: statusText,\n          url: url\n        }));\n      }\n    }\n    /**\n     * Resolve the request by returning an `ErrorEvent` (e.g. simulating a network failure).\n     */\n\n  }, {\n    key: \"error\",\n    value: function error(_error) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (this.cancelled) {\n        throw new Error(\"Cannot return an error for a cancelled request.\");\n      }\n\n      if (opts.status && opts.status >= 200 && opts.status < 300) {\n        throw new Error(\"error() called with a successful status.\");\n      }\n\n      var headers = opts.headers instanceof HttpHeaders ? opts.headers : new HttpHeaders(opts.headers);\n      this.observer.error(new HttpErrorResponse({\n        error: _error,\n        headers: headers,\n        status: opts.status || 0,\n        statusText: opts.statusText || '',\n        url: this.request.urlWithParams\n      }));\n    }\n    /**\n     * Deliver an arbitrary `HttpEvent` (such as a progress event) on the response stream for this\n     * request.\n     */\n\n  }, {\n    key: \"event\",\n    value: function event(_event) {\n      if (this.cancelled) {\n        throw new Error(\"Cannot send events to a cancelled request.\");\n      }\n\n      this.observer.next(_event);\n    }\n  }, {\n    key: \"cancelled\",\n    get: function get() {\n      return this._cancelled;\n    }\n  }]);\n\n  return TestRequest;\n}();\n/**\n * Helper function to convert a response body to an ArrayBuffer.\n */\n\n\nfunction _toArrayBufferBody(body) {\n  if (typeof ArrayBuffer === 'undefined') {\n    throw new Error('ArrayBuffer responses are not supported on this platform.');\n  }\n\n  if (body instanceof ArrayBuffer) {\n    return body;\n  }\n\n  throw new Error('Automatic conversion to ArrayBuffer is not supported for response type.');\n}\n/**\n * Helper function to convert a response body to a Blob.\n */\n\n\nfunction _toBlob(body) {\n  if (typeof Blob === 'undefined') {\n    throw new Error('Blob responses are not supported on this platform.');\n  }\n\n  if (body instanceof Blob) {\n    return body;\n  }\n\n  if (ArrayBuffer && body instanceof ArrayBuffer) {\n    return new Blob([body]);\n  }\n\n  throw new Error('Automatic conversion to Blob is not supported for response type.');\n}\n/**\n * Helper function to convert a response body to JSON data.\n */\n\n\nfunction _toJsonBody(body) {\n  var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'JSON';\n\n  if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n    throw new Error(\"Automatic conversion to \".concat(format, \" is not supported for ArrayBuffers.\"));\n  }\n\n  if (typeof Blob !== 'undefined' && body instanceof Blob) {\n    throw new Error(\"Automatic conversion to \".concat(format, \" is not supported for Blobs.\"));\n  }\n\n  if (typeof body === 'string' || typeof body === 'number' || typeof body === 'object' || typeof body === 'boolean' || Array.isArray(body)) {\n    return body;\n  }\n\n  throw new Error(\"Automatic conversion to \".concat(format, \" is not supported for response type.\"));\n}\n/**\n * Helper function to convert a response body to a string.\n */\n\n\nfunction _toTextBody(body) {\n  if (typeof body === 'string') {\n    return body;\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n    throw new Error('Automatic conversion to text is not supported for ArrayBuffers.');\n  }\n\n  if (typeof Blob !== 'undefined' && body instanceof Blob) {\n    throw new Error('Automatic conversion to text is not supported for Blobs.');\n  }\n\n  return JSON.stringify(_toJsonBody(body, 'text'));\n}\n/**\n * Convert a response body to the requested type.\n */\n\n\nfunction _maybeConvertBody(responseType, body) {\n  if (body === null) {\n    return null;\n  }\n\n  switch (responseType) {\n    case 'arraybuffer':\n      return _toArrayBufferBody(body);\n\n    case 'blob':\n      return _toBlob(body);\n\n    case 'json':\n      return _toJsonBody(body);\n\n    case 'text':\n      return _toTextBody(body);\n\n    default:\n      throw new Error(\"Unsupported responseType: \".concat(responseType));\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A testing backend for `HttpClient` which both acts as an `HttpBackend`\n * and as the `HttpTestingController`.\n *\n * `HttpClientTestingBackend` works by keeping a list of all open requests.\n * As requests come in, they're added to the list. Users can assert that specific\n * requests were made and then flush them. In the end, a verify() method asserts\n * that no unexpected requests were made.\n *\n *\n */\n\n\nvar HttpClientTestingBackend = /*#__PURE__*/function () {\n  function HttpClientTestingBackend() {\n    _classCallCheck(this, HttpClientTestingBackend);\n\n    /**\n     * List of pending requests which have not yet been expected.\n     */\n    this.open = [];\n  }\n  /**\n   * Handle an incoming request by queueing it in the list of open requests.\n   */\n\n\n  _createClass(HttpClientTestingBackend, [{\n    key: \"handle\",\n    value: function handle(req) {\n      var _this = this;\n\n      return new Observable(function (observer) {\n        var testReq = new TestRequest(req, observer);\n\n        _this.open.push(testReq);\n\n        observer.next({\n          type: HttpEventType.Sent\n        });\n        return function () {\n          testReq._cancelled = true;\n        };\n      });\n    }\n    /**\n     * Helper function to search for requests in the list of open requests.\n     */\n\n  }, {\n    key: \"_match\",\n    value: function _match(match) {\n      if (typeof match === 'string') {\n        return this.open.filter(function (testReq) {\n          return testReq.request.urlWithParams === match;\n        });\n      } else if (typeof match === 'function') {\n        return this.open.filter(function (testReq) {\n          return match(testReq.request);\n        });\n      } else {\n        return this.open.filter(function (testReq) {\n          return (!match.method || testReq.request.method === match.method.toUpperCase()) && (!match.url || testReq.request.urlWithParams === match.url);\n        });\n      }\n    }\n    /**\n     * Search for requests in the list of open requests, and return all that match\n     * without asserting anything about the number of matches.\n     */\n\n  }, {\n    key: \"match\",\n    value: function match(_match2) {\n      var _this2 = this;\n\n      var results = this._match(_match2);\n\n      results.forEach(function (result) {\n        var index = _this2.open.indexOf(result);\n\n        if (index !== -1) {\n          _this2.open.splice(index, 1);\n        }\n      });\n      return results;\n    }\n    /**\n     * Expect that a single outstanding request matches the given matcher, and return\n     * it.\n     *\n     * Requests returned through this API will no longer be in the list of open requests,\n     * and thus will not match twice.\n     */\n\n  }, {\n    key: \"expectOne\",\n    value: function expectOne(match, description) {\n      description = description || this.descriptionFromMatcher(match);\n      var matches = this.match(match);\n\n      if (matches.length > 1) {\n        throw new Error(\"Expected one matching request for criteria \\\"\".concat(description, \"\\\", found \").concat(matches.length, \" requests.\"));\n      }\n\n      if (matches.length === 0) {\n        var message = \"Expected one matching request for criteria \\\"\".concat(description, \"\\\", found none.\");\n\n        if (this.open.length > 0) {\n          // Show the methods and URLs of open requests in the error, for convenience.\n          var requests = this.open.map(function (testReq) {\n            var url = testReq.request.urlWithParams;\n            var method = testReq.request.method;\n            return \"\".concat(method, \" \").concat(url);\n          }).join(', ');\n          message += \" Requests received are: \".concat(requests, \".\");\n        }\n\n        throw new Error(message);\n      }\n\n      return matches[0];\n    }\n    /**\n     * Expect that no outstanding requests match the given matcher, and throw an error\n     * if any do.\n     */\n\n  }, {\n    key: \"expectNone\",\n    value: function expectNone(match, description) {\n      description = description || this.descriptionFromMatcher(match);\n      var matches = this.match(match);\n\n      if (matches.length > 0) {\n        throw new Error(\"Expected zero matching requests for criteria \\\"\".concat(description, \"\\\", found \").concat(matches.length, \".\"));\n      }\n    }\n    /**\n     * Validate that there are no outstanding requests.\n     */\n\n  }, {\n    key: \"verify\",\n    value: function verify() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var open = this.open; // It's possible that some requests may be cancelled, and this is expected.\n      // The user can ask to ignore open requests which have been cancelled.\n\n      if (opts.ignoreCancelled) {\n        open = open.filter(function (testReq) {\n          return !testReq.cancelled;\n        });\n      }\n\n      if (open.length > 0) {\n        // Show the methods and URLs of open requests in the error, for convenience.\n        var requests = open.map(function (testReq) {\n          var url = testReq.request.urlWithParams.split('?')[0];\n          var method = testReq.request.method;\n          return \"\".concat(method, \" \").concat(url);\n        }).join(', ');\n        throw new Error(\"Expected no open requests, found \".concat(open.length, \": \").concat(requests));\n      }\n    }\n  }, {\n    key: \"descriptionFromMatcher\",\n    value: function descriptionFromMatcher(matcher) {\n      if (typeof matcher === 'string') {\n        return \"Match URL: \".concat(matcher);\n      } else if (typeof matcher === 'object') {\n        var method = matcher.method || '(any)';\n        var url = matcher.url || '(any)';\n        return \"Match method: \".concat(method, \", URL: \").concat(url);\n      } else {\n        return \"Match by function: \".concat(matcher.name);\n      }\n    }\n  }]);\n\n  return HttpClientTestingBackend;\n}();\n\nHttpClientTestingBackend.Éµfac = function HttpClientTestingBackend_Factory(t) {\n  return new (t || HttpClientTestingBackend)();\n};\n\nHttpClientTestingBackend.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({\n  token: HttpClientTestingBackend,\n  factory: HttpClientTestingBackend.Éµfac\n});\n/*@__PURE__*/\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(HttpClientTestingBackend, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Configures `HttpClientTestingBackend` as the `HttpBackend` used by `HttpClient`.\n *\n * Inject `HttpTestingController` to expect and flush requests in your tests.\n *\n * @publicApi\n */\n\n\nvar HttpClientTestingModule = function HttpClientTestingModule() {\n  _classCallCheck(this, HttpClientTestingModule);\n};\n\nHttpClientTestingModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({\n  type: HttpClientTestingModule\n});\nHttpClientTestingModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({\n  factory: function HttpClientTestingModule_Factory(t) {\n    return new (t || HttpClientTestingModule)();\n  },\n  providers: [HttpClientTestingBackend, {\n    provide: HttpBackend,\n    useExisting: HttpClientTestingBackend\n  }, {\n    provide: HttpTestingController,\n    useExisting: HttpClientTestingBackend\n  }],\n  imports: [[HttpClientModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(HttpClientTestingModule, {\n    imports: function imports() {\n      return [HttpClientModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(HttpClientTestingModule, [{\n    type: NgModule,\n    args: [{\n      imports: [HttpClientModule],\n      providers: [HttpClientTestingBackend, {\n        provide: HttpBackend,\n        useExisting: HttpClientTestingBackend\n      }, {\n        provide: HttpTestingController,\n        useExisting: HttpClientTestingBackend\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { HttpClientTestingModule, HttpTestingController, TestRequest, HttpClientTestingBackend as Éµangular_packages_common_http_testing_testing_a };","map":{"version":3,"sources":["../../../../../../packages/common/http/testing/src/api.ts","../../../../../../packages/common/http/testing/src/request.ts","../../../../../../packages/common/http/testing/src/backend.ts","../../../../../../packages/common/http/testing/src/module.ts","../../../../../../packages/common/http/testing/public_api.ts","../../../../../../packages/common/http/testing/index.ts","../../../../../../packages/common/http/testing/testing.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpRequest} from '@angular/common/http';\n\nimport {TestRequest} from './request';\n\n/**\n * Defines a matcher for requests based on URL, method, or both.\n *\n * @publicApi\n */\nexport interface RequestMatch {\n  method?: string;\n  url?: string;\n}\n\n/**\n * Controller to be injected into tests, that allows for mocking and flushing\n * of requests.\n *\n * @publicApi\n */\nexport abstract class HttpTestingController {\n  /**\n   * Search for requests that match the given parameter, without any expectations.\n   */\n  abstract match(match: string|RequestMatch|((req: HttpRequest<any>) => boolean)): TestRequest[];\n\n  /**\n   * Expect that a single request has been made which matches the given URL, and return its\n   * mock.\n   *\n   * If no such request has been made, or more than one such request has been made, fail with an\n   * error message including the given request description, if any.\n   */\n  abstract expectOne(url: string, description?: string): TestRequest;\n\n  /**\n   * Expect that a single request has been made which matches the given parameters, and return\n   * its mock.\n   *\n   * If no such request has been made, or more than one such request has been made, fail with an\n   * error message including the given request description, if any.\n   */\n  abstract expectOne(params: RequestMatch, description?: string): TestRequest;\n\n  /**\n   * Expect that a single request has been made which matches the given predicate function, and\n   * return its mock.\n   *\n   * If no such request has been made, or more than one such request has been made, fail with an\n   * error message including the given request description, if any.\n   */\n  abstract expectOne(matchFn: ((req: HttpRequest<any>) => boolean), description?: string):\n      TestRequest;\n\n  /**\n   * Expect that a single request has been made which matches the given condition, and return\n   * its mock.\n   *\n   * If no such request has been made, or more than one such request has been made, fail with an\n   * error message including the given request description, if any.\n   */\n  abstract expectOne(\n      match: string|RequestMatch|((req: HttpRequest<any>) => boolean),\n      description?: string): TestRequest;\n\n  /**\n   * Expect that no requests have been made which match the given URL.\n   *\n   * If a matching request has been made, fail with an error message including the given request\n   * description, if any.\n   */\n  abstract expectNone(url: string, description?: string): void;\n\n  /**\n   * Expect that no requests have been made which match the given parameters.\n   *\n   * If a matching request has been made, fail with an error message including the given request\n   * description, if any.\n   */\n  abstract expectNone(params: RequestMatch, description?: string): void;\n\n  /**\n   * Expect that no requests have been made which match the given predicate function.\n   *\n   * If a matching request has been made, fail with an error message including the given request\n   * description, if any.\n   */\n  abstract expectNone(matchFn: ((req: HttpRequest<any>) => boolean), description?: string): void;\n\n  /**\n   * Expect that no requests have been made which match the given condition.\n   *\n   * If a matching request has been made, fail with an error message including the given request\n   * description, if any.\n   */\n  abstract expectNone(\n      match: string|RequestMatch|((req: HttpRequest<any>) => boolean), description?: string): void;\n\n  /**\n   * Verify that no unmatched requests are outstanding.\n   *\n   * If any requests are outstanding, fail with an error message indicating which requests were not\n   * handled.\n   *\n   * If `ignoreCancelled` is not set (the default), `verify()` will also fail if cancelled requests\n   * were not explicitly matched.\n   */\n  abstract verify(opts?: {ignoreCancelled?: boolean}): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpErrorResponse, HttpEvent, HttpHeaders, HttpRequest, HttpResponse} from '@angular/common/http';\nimport {Observer} from 'rxjs';\n\n/**\n * A mock requests that was received and is ready to be answered.\n *\n * This interface allows access to the underlying `HttpRequest`, and allows\n * responding with `HttpEvent`s or `HttpErrorResponse`s.\n *\n * @publicApi\n */\nexport class TestRequest {\n  /**\n   * Whether the request was cancelled after it was sent.\n   */\n  get cancelled(): boolean {\n    return this._cancelled;\n  }\n\n  /**\n   * @internal set by `HttpClientTestingBackend`\n   */\n  _cancelled = false;\n\n  constructor(public request: HttpRequest<any>, private observer: Observer<HttpEvent<any>>) {}\n\n  /**\n   * Resolve the request by returning a body plus additional HTTP information (such as response\n   * headers) if provided.\n   * If the request specifies an expected body type, the body is converted into the requested type.\n   * Otherwise, the body is converted to `JSON` by default.\n   *\n   * Both successful and unsuccessful responses can be delivered via `flush()`.\n   */\n  flush(\n      body: ArrayBuffer|Blob|boolean|string|number|Object|(boolean|string|number|Object|null)[]|\n      null,\n      opts: {\n        headers?: HttpHeaders|{[name: string]: string | string[]},\n        status?: number,\n        statusText?: string,\n      } = {}): void {\n    if (this.cancelled) {\n      throw new Error(`Cannot flush a cancelled request.`);\n    }\n    const url = this.request.urlWithParams;\n    const headers =\n        (opts.headers instanceof HttpHeaders) ? opts.headers : new HttpHeaders(opts.headers);\n    body = _maybeConvertBody(this.request.responseType, body);\n    let statusText: string|undefined = opts.statusText;\n    let status: number = opts.status !== undefined ? opts.status : 200;\n    if (opts.status === undefined) {\n      if (body === null) {\n        status = 204;\n        statusText = statusText || 'No Content';\n      } else {\n        statusText = statusText || 'OK';\n      }\n    }\n    if (statusText === undefined) {\n      throw new Error('statusText is required when setting a custom status.');\n    }\n    if (status >= 200 && status < 300) {\n      this.observer.next(new HttpResponse<any>({body, headers, status, statusText, url}));\n      this.observer.complete();\n    } else {\n      this.observer.error(new HttpErrorResponse({error: body, headers, status, statusText, url}));\n    }\n  }\n\n  /**\n   * Resolve the request by returning an `ErrorEvent` (e.g. simulating a network failure).\n   */\n  error(error: ErrorEvent, opts: {\n    headers?: HttpHeaders|{[name: string]: string | string[]},\n    status?: number,\n    statusText?: string,\n  } = {}): void {\n    if (this.cancelled) {\n      throw new Error(`Cannot return an error for a cancelled request.`);\n    }\n    if (opts.status && opts.status >= 200 && opts.status < 300) {\n      throw new Error(`error() called with a successful status.`);\n    }\n    const headers =\n        (opts.headers instanceof HttpHeaders) ? opts.headers : new HttpHeaders(opts.headers);\n    this.observer.error(new HttpErrorResponse({\n      error,\n      headers,\n      status: opts.status || 0,\n      statusText: opts.statusText || '',\n      url: this.request.urlWithParams,\n    }));\n  }\n\n  /**\n   * Deliver an arbitrary `HttpEvent` (such as a progress event) on the response stream for this\n   * request.\n   */\n  event(event: HttpEvent<any>): void {\n    if (this.cancelled) {\n      throw new Error(`Cannot send events to a cancelled request.`);\n    }\n    this.observer.next(event);\n  }\n}\n\n\n/**\n * Helper function to convert a response body to an ArrayBuffer.\n */\nfunction _toArrayBufferBody(body: ArrayBuffer|Blob|string|number|Object|\n                            (string | number | Object | null)[]): ArrayBuffer {\n  if (typeof ArrayBuffer === 'undefined') {\n    throw new Error('ArrayBuffer responses are not supported on this platform.');\n  }\n  if (body instanceof ArrayBuffer) {\n    return body;\n  }\n  throw new Error('Automatic conversion to ArrayBuffer is not supported for response type.');\n}\n\n/**\n * Helper function to convert a response body to a Blob.\n */\nfunction _toBlob(body: ArrayBuffer|Blob|string|number|Object|\n                 (string | number | Object | null)[]): Blob {\n  if (typeof Blob === 'undefined') {\n    throw new Error('Blob responses are not supported on this platform.');\n  }\n  if (body instanceof Blob) {\n    return body;\n  }\n  if (ArrayBuffer && body instanceof ArrayBuffer) {\n    return new Blob([body]);\n  }\n  throw new Error('Automatic conversion to Blob is not supported for response type.');\n}\n\n/**\n * Helper function to convert a response body to JSON data.\n */\nfunction _toJsonBody(\n    body: ArrayBuffer|Blob|boolean|string|number|Object|\n    (boolean | string | number | Object | null)[],\n    format: string = 'JSON'): Object|string|number|(Object | string | number)[] {\n  if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n    throw new Error(`Automatic conversion to ${format} is not supported for ArrayBuffers.`);\n  }\n  if (typeof Blob !== 'undefined' && body instanceof Blob) {\n    throw new Error(`Automatic conversion to ${format} is not supported for Blobs.`);\n  }\n  if (typeof body === 'string' || typeof body === 'number' || typeof body === 'object' ||\n      typeof body === 'boolean' || Array.isArray(body)) {\n    return body;\n  }\n  throw new Error(`Automatic conversion to ${format} is not supported for response type.`);\n}\n\n/**\n * Helper function to convert a response body to a string.\n */\nfunction _toTextBody(body: ArrayBuffer|Blob|string|number|Object|\n                     (string | number | Object | null)[]): string {\n  if (typeof body === 'string') {\n    return body;\n  }\n  if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n    throw new Error('Automatic conversion to text is not supported for ArrayBuffers.');\n  }\n  if (typeof Blob !== 'undefined' && body instanceof Blob) {\n    throw new Error('Automatic conversion to text is not supported for Blobs.');\n  }\n  return JSON.stringify(_toJsonBody(body, 'text'));\n}\n\n/**\n * Convert a response body to the requested type.\n */\nfunction _maybeConvertBody(\n    responseType: string,\n    body: ArrayBuffer|Blob|string|number|Object|(string | number | Object | null)[]|\n    null): ArrayBuffer|Blob|string|number|Object|(string | number | Object | null)[]|null {\n  if (body === null) {\n    return null;\n  }\n  switch (responseType) {\n    case 'arraybuffer':\n      return _toArrayBufferBody(body);\n    case 'blob':\n      return _toBlob(body);\n    case 'json':\n      return _toJsonBody(body);\n    case 'text':\n      return _toTextBody(body);\n    default:\n      throw new Error(`Unsupported responseType: ${responseType}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpBackend, HttpEvent, HttpEventType, HttpRequest} from '@angular/common/http';\nimport {Injectable} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport {HttpTestingController, RequestMatch} from './api';\nimport {TestRequest} from './request';\n\n\n/**\n * A testing backend for `HttpClient` which both acts as an `HttpBackend`\n * and as the `HttpTestingController`.\n *\n * `HttpClientTestingBackend` works by keeping a list of all open requests.\n * As requests come in, they're added to the list. Users can assert that specific\n * requests were made and then flush them. In the end, a verify() method asserts\n * that no unexpected requests were made.\n *\n *\n */\n@Injectable()\nexport class HttpClientTestingBackend implements HttpBackend, HttpTestingController {\n  /**\n   * List of pending requests which have not yet been expected.\n   */\n  private open: TestRequest[] = [];\n\n  /**\n   * Handle an incoming request by queueing it in the list of open requests.\n   */\n  handle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    return new Observable((observer: Observer<any>) => {\n      const testReq = new TestRequest(req, observer);\n      this.open.push(testReq);\n      observer.next({type: HttpEventType.Sent} as HttpEvent<any>);\n      return () => {\n        testReq._cancelled = true;\n      };\n    });\n  }\n\n  /**\n   * Helper function to search for requests in the list of open requests.\n   */\n  private _match(match: string|RequestMatch|((req: HttpRequest<any>) => boolean)): TestRequest[] {\n    if (typeof match === 'string') {\n      return this.open.filter(testReq => testReq.request.urlWithParams === match);\n    } else if (typeof match === 'function') {\n      return this.open.filter(testReq => match(testReq.request));\n    } else {\n      return this.open.filter(\n          testReq => (!match.method || testReq.request.method === match.method.toUpperCase()) &&\n              (!match.url || testReq.request.urlWithParams === match.url));\n    }\n  }\n\n  /**\n   * Search for requests in the list of open requests, and return all that match\n   * without asserting anything about the number of matches.\n   */\n  match(match: string|RequestMatch|((req: HttpRequest<any>) => boolean)): TestRequest[] {\n    const results = this._match(match);\n    results.forEach(result => {\n      const index = this.open.indexOf(result);\n      if (index !== -1) {\n        this.open.splice(index, 1);\n      }\n    });\n    return results;\n  }\n\n  /**\n   * Expect that a single outstanding request matches the given matcher, and return\n   * it.\n   *\n   * Requests returned through this API will no longer be in the list of open requests,\n   * and thus will not match twice.\n   */\n  expectOne(match: string|RequestMatch|((req: HttpRequest<any>) => boolean), description?: string):\n      TestRequest {\n    description = description || this.descriptionFromMatcher(match);\n    const matches = this.match(match);\n    if (matches.length > 1) {\n      throw new Error(`Expected one matching request for criteria \"${description}\", found ${\n          matches.length} requests.`);\n    }\n    if (matches.length === 0) {\n      let message = `Expected one matching request for criteria \"${description}\", found none.`;\n      if (this.open.length > 0) {\n        // Show the methods and URLs of open requests in the error, for convenience.\n        const requests = this.open\n                             .map(testReq => {\n                               const url = testReq.request.urlWithParams;\n                               const method = testReq.request.method;\n                               return `${method} ${url}`;\n                             })\n                             .join(', ');\n        message += ` Requests received are: ${requests}.`;\n      }\n      throw new Error(message);\n    }\n    return matches[0];\n  }\n\n  /**\n   * Expect that no outstanding requests match the given matcher, and throw an error\n   * if any do.\n   */\n  expectNone(match: string|RequestMatch|((req: HttpRequest<any>) => boolean), description?: string):\n      void {\n    description = description || this.descriptionFromMatcher(match);\n    const matches = this.match(match);\n    if (matches.length > 0) {\n      throw new Error(`Expected zero matching requests for criteria \"${description}\", found ${\n          matches.length}.`);\n    }\n  }\n\n  /**\n   * Validate that there are no outstanding requests.\n   */\n  verify(opts: {ignoreCancelled?: boolean} = {}): void {\n    let open = this.open;\n    // It's possible that some requests may be cancelled, and this is expected.\n    // The user can ask to ignore open requests which have been cancelled.\n    if (opts.ignoreCancelled) {\n      open = open.filter(testReq => !testReq.cancelled);\n    }\n    if (open.length > 0) {\n      // Show the methods and URLs of open requests in the error, for convenience.\n      const requests = open.map(testReq => {\n                             const url = testReq.request.urlWithParams.split('?')[0];\n                             const method = testReq.request.method;\n                             return `${method} ${url}`;\n                           })\n                           .join(', ');\n      throw new Error(`Expected no open requests, found ${open.length}: ${requests}`);\n    }\n  }\n\n  private descriptionFromMatcher(matcher: string|RequestMatch|\n                                 ((req: HttpRequest<any>) => boolean)): string {\n    if (typeof matcher === 'string') {\n      return `Match URL: ${matcher}`;\n    } else if (typeof matcher === 'object') {\n      const method = matcher.method || '(any)';\n      const url = matcher.url || '(any)';\n      return `Match method: ${method}, URL: ${url}`;\n    } else {\n      return `Match by function: ${matcher.name}`;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpBackend, HttpClientModule} from '@angular/common/http';\nimport {NgModule} from '@angular/core';\n\nimport {HttpTestingController} from './api';\nimport {HttpClientTestingBackend} from './backend';\n\n\n/**\n * Configures `HttpClientTestingBackend` as the `HttpBackend` used by `HttpClient`.\n *\n * Inject `HttpTestingController` to expect and flush requests in your tests.\n *\n * @publicApi\n */\n@NgModule({\n  imports: [\n    HttpClientModule,\n  ],\n  providers: [\n    HttpClientTestingBackend,\n    {provide: HttpBackend, useExisting: HttpClientTestingBackend},\n    {provide: HttpTestingController, useExisting: HttpClientTestingBackend},\n  ],\n})\nexport class HttpClientTestingModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {HttpTestingController, RequestMatch} from './src/api';\nexport {HttpClientTestingModule} from './src/module';\nexport {TestRequest} from './src/request';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {HttpClientTestingBackend as Éµangular_packages_common_http_testing_testing_a} from './src/backend';"]},"metadata":{},"sourceType":"module"}