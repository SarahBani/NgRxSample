{"ast":null,"code":"import { Actions } from '@ngrx/effects';\nimport { defer } from 'rxjs';\n/**\n * @fileoverview added by tsickle\n * Generated from: testing.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} factoryOrSource\n * @return {?}\n */\n\nfunction provideMockActions(factoryOrSource) {\n  return {\n    provide: Actions,\n    useFactory:\n    /**\n    * @return {?}\n    */\n    function useFactory() {\n      if (typeof factoryOrSource === 'function') {\n        return new Actions(defer(factoryOrSource));\n      }\n\n      return new Actions(factoryOrSource);\n    },\n    deps: []\n  };\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: ngrx-effects-testing.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { provideMockActions };","map":{"version":3,"sources":["../../../../modules/effects/testing/src/testing.ts"],"names":[],"mappings":";;;;;;;;;;;;;SAiEgB,kB,CACd,e,EAA0D;AAE1D,SAAO;AACL,IAAA,OAAO,EAAE,OADJ;AAEL,IAAA,UAAU;AAAA;AAAO;AAClB;AADa,0BAAA;AACV,UAAI,OAAO,eAAP,KAA2B,UAA/B,EAA2C;AACzC,eAAO,IAAI,OAAJ,CAAY,KAAK,CAAC,eAAD,CAAjB,CAAP;AACD;;AAED,aAAO,IAAI,OAAJ,CAAY,eAAZ,CAAP;AACD,KARI;AASL,IAAA,IAAI,EAAE;AATD,GAAP;AAWF;AACC;AAAI;AAAkC;AAAiC;AAAsI;;AAAK;AAAI;AAAkC;AAA2C;AAAsI;;;AAAK,SAAA,kBAAA","sourcesContent":["import { FactoryProvider } from '@angular/core';\nimport { Actions } from '@ngrx/effects';\nimport { defer, Observable } from 'rxjs';\n\n/**\n * @description\n * Creates mock actions provider.\n *\n * @param source Actions' source\n */\nexport function provideMockActions(source: Observable<any>): FactoryProvider;\n/**\n * @description\n * Creates mock actions provider.\n *\n * @param factory Actions' source creation function\n *\n * @usageNotes\n *\n * **With `TestBed.configureTestingModule`**\n *\n * ```ts\n * describe('Books Effects', () => {\n *   let actions$: Observable<any>;\n *   let effects: BooksEffects;\n *\n *   beforeEach(() => {\n *     TestBed.configureTestingModule({\n *       providers: [\n *         provideMockActions(() => actions$),\n *         BooksEffects,\n *       ],\n *     });\n *\n *     actions$ = TestBed.inject(Actions);\n *     effects = TestBed.inject(BooksEffects);\n *   });\n * });\n * ```\n *\n * **With `Injector.create`**\n *\n * ```ts\n * describe('Counter Effects', () => {\n *   let injector: Injector;\n *   let actions$: Observable<any>;\n *   let effects: CounterEffects;\n *\n *   beforeEach(() => {\n *     injector = Injector.create({\n *       providers: [\n *         provideMockActions(() => actions$),\n *         CounterEffects,\n *       ],\n *     });\n *\n *     actions$ = injector.get(Actions);\n *     effects = injector.get(CounterEffects);\n *   });\n * });\n * ```\n */\nexport function provideMockActions(\n  factory: () => Observable<any>\n): FactoryProvider;\nexport function provideMockActions(\n  factoryOrSource: (() => Observable<any>) | Observable<any>\n): FactoryProvider {\n  return {\n    provide: Actions,\n    useFactory: (): Observable<any> => {\n      if (typeof factoryOrSource === 'function') {\n        return new Actions(defer(factoryOrSource));\n      }\n\n      return new Actions(factoryOrSource);\n    },\n    deps: [],\n  };\n}\n"]},"metadata":{},"sourceType":"module"}