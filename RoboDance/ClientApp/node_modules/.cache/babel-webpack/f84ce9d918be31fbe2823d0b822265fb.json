{"ast":null,"code":"import { Notification, Observable } from 'rxjs';\nimport { TestScheduler } from 'rxjs/testing';\nimport { getTestScheduler, initTestScheduler, resetTestScheduler } from './src/scheduler';\nimport { TestColdObservable, TestHotObservable } from './src/test-observables';\nexport { getTestScheduler, initTestScheduler, resetTestScheduler } from './src/scheduler';\nexport function hot(marbles, values, error) {\n  return new TestHotObservable(marbles.trim(), values, error);\n}\nexport function cold(marbles, values, error) {\n  return new TestColdObservable(marbles.trim(), values, error);\n}\nexport function time(marbles) {\n  return getTestScheduler().createTime(marbles.trim());\n}\n/*\n* Based on source code found in rxjs library\n* https://github.com/ReactiveX/rxjs/blob/master/src/testing/TestScheduler.ts\n*\n*/\n\nfunction materializeInnerObservable(observable, outerFrame) {\n  var messages = [];\n  var scheduler = getTestScheduler();\n  observable.subscribe(function (value) {\n    messages.push({\n      frame: scheduler.frame - outerFrame,\n      notification: Notification.createNext(value)\n    });\n  }, function (err) {\n    messages.push({\n      frame: scheduler.frame - outerFrame,\n      notification: Notification.createError(err)\n    });\n  }, function () {\n    messages.push({\n      frame: scheduler.frame - outerFrame,\n      notification: Notification.createComplete()\n    });\n  });\n  return messages;\n}\n\nexport function addMatchers() {\n  jasmine.addMatchers({\n    toHaveSubscriptions: function toHaveSubscriptions() {\n      return {\n        compare: function compare(actual, marbles) {\n          var marblesArray = typeof marbles === 'string' ? [marbles] : marbles;\n          var results = marblesArray.map(function (marbles) {\n            return TestScheduler.parseMarblesAsSubscriptions(marbles);\n          });\n          expect(results).toEqual(actual.getSubscriptions());\n          return {\n            pass: true\n          };\n        }\n      };\n    },\n    toBeObservable: function toBeObservable() {\n      return {\n        compare: function compare(actual, fixture) {\n          var results = [];\n          var subscription;\n          var scheduler = getTestScheduler();\n          scheduler.schedule(function () {\n            subscription = actual.subscribe(function (x) {\n              var value = x; // Support Observable-of-Observables\n\n              if (x instanceof Observable) {\n                value = materializeInnerObservable(value, scheduler.frame);\n              }\n\n              results.push({\n                frame: scheduler.frame,\n                notification: Notification.createNext(value)\n              });\n            }, function (err) {\n              results.push({\n                frame: scheduler.frame,\n                notification: Notification.createError(err)\n              });\n            }, function () {\n              results.push({\n                frame: scheduler.frame,\n                notification: Notification.createComplete()\n              });\n            });\n          });\n          scheduler.flush();\n          var expected = TestScheduler.parseMarbles(fixture.marbles, fixture.values, fixture.error, true, true);\n          expect(results).toEqual(expected);\n          return {\n            pass: true\n          };\n        }\n      };\n    }\n  });\n}\nexport function setupEnvironment() {\n  jasmine.getEnv().beforeAll(function () {\n    return addMatchers();\n  });\n  jasmine.getEnv().beforeEach(function () {\n    return initTestScheduler();\n  });\n  jasmine.getEnv().afterEach(function () {\n    getTestScheduler().flush();\n    resetTestScheduler();\n  });\n}\nsetupEnvironment();","map":{"version":3,"sources":["../../index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Notification, Observable, Subscription } from 'rxjs';\nimport { SubscriptionLog } from 'rxjs/internal/testing/SubscriptionLog';\nimport { TestMessage } from 'rxjs/internal/testing/TestMessage';\nimport { TestScheduler } from 'rxjs/testing';\n\nimport {\n  getTestScheduler,\n  initTestScheduler,\n  resetTestScheduler,\n} from './src/scheduler';\nimport {\n  TestColdObservable,\n  TestHotObservable,\n  TestObservable,\n} from './src/test-observables';\n\nexport {\n  getTestScheduler,\n  initTestScheduler,\n  resetTestScheduler,\n} from './src/scheduler';\n\nexport function hot(\n  marbles: string,\n  values?: any,\n  error?: any,\n): TestHotObservable {\n  return new TestHotObservable(marbles.trim(), values, error);\n}\n\nexport function cold(\n  marbles: string,\n  values?: any,\n  error?: any,\n): TestColdObservable {\n  return new TestColdObservable(marbles.trim(), values, error);\n}\n\nexport function time(marbles: string): number {\n  return getTestScheduler().createTime(marbles.trim());\n}\n\ndeclare global {\n  namespace jasmine {\n    interface Matchers<T> {\n      toBeObservable: any;\n      toHaveSubscriptions: any;\n    }\n  }\n  namespace jest {\n    interface Matchers<R> {\n      toBeObservable: any;\n      toHaveSubscriptions: any;\n    }\n  }\n}\n\n/*\n* Based on source code found in rxjs library\n* https://github.com/ReactiveX/rxjs/blob/master/src/testing/TestScheduler.ts\n*\n*/\nfunction materializeInnerObservable(\n  observable: Observable<any>,\n  outerFrame: number,\n): TestMessage[] {\n  const messages: TestMessage[] = [];\n  const scheduler = getTestScheduler();\n\n  observable.subscribe(\n    value => {\n      messages.push({\n        frame: scheduler.frame - outerFrame,\n        notification: Notification.createNext(value),\n      });\n    },\n    err => {\n      messages.push({\n        frame: scheduler.frame - outerFrame,\n        notification: Notification.createError(err),\n      });\n    },\n    () => {\n      messages.push({\n        frame: scheduler.frame - outerFrame,\n        notification: Notification.createComplete(),\n      });\n    },\n  );\n  return messages;\n}\n\nexport function addMatchers() {\n  jasmine.addMatchers({\n    toHaveSubscriptions: () => ({\n      compare: function(actual: TestObservable, marbles: string | string[]) {\n        const marblesArray: string[] =\n          typeof marbles === 'string' ? [marbles] : marbles;\n        const results: SubscriptionLog[] = marblesArray.map(marbles =>\n          TestScheduler.parseMarblesAsSubscriptions(marbles),\n        );\n\n        expect(results).toEqual(actual.getSubscriptions());\n\n        return { pass: true };\n      },\n    }),\n    toBeObservable: () => ({\n      compare: function(actual: TestObservable, fixture: TestObservable) {\n        const results: TestMessage[] = [];\n        let subscription: Subscription;\n        const scheduler = getTestScheduler();\n\n        scheduler.schedule(() => {\n          subscription = actual.subscribe(\n            (x: any) => {\n              let value = x;\n\n              // Support Observable-of-Observables\n              if (x instanceof Observable) {\n                value = materializeInnerObservable(value, scheduler.frame);\n              }\n\n              results.push({\n                frame: scheduler.frame,\n                notification: Notification.createNext(value),\n              });\n            },\n            (err: any) => {\n              results.push({\n                frame: scheduler.frame,\n                notification: Notification.createError(err),\n              });\n            },\n            () => {\n              results.push({\n                frame: scheduler.frame,\n                notification: Notification.createComplete(),\n              });\n            },\n          );\n        });\n        scheduler.flush();\n\n        const expected = TestScheduler.parseMarbles(\n          fixture.marbles,\n          fixture.values,\n          fixture.error,\n          true,\n          true,\n        );\n\n        expect(results).toEqual(expected);\n\n        return { pass: true };\n      },\n    }),\n  });\n}\n\nexport function setupEnvironment() {\n  jasmine.getEnv().beforeAll(() => addMatchers());\n\n  jasmine.getEnv().beforeEach(() => initTestScheduler());\n  jasmine.getEnv().afterEach(() => {\n    getTestScheduler().flush();\n    resetTestScheduler();\n  });\n}\n\nsetupEnvironment();\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}