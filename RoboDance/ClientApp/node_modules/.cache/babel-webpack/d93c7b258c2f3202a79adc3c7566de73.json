{"ast":null,"code":"import _classCallCheck from \"H:/Project/Parkside/RoboDance/RoboDance/ClientApp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"H:/Project/Parkside/RoboDance/RoboDance/ClientApp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"H:/Project/Parkside/RoboDance/RoboDance/ClientApp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"H:/Project/Parkside/RoboDance/RoboDance/ClientApp/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Observable } from 'rxjs';\nimport { getTestScheduler } from './scheduler';\nimport { TestScheduler } from 'rxjs/testing';\nimport { HotObservable } from 'rxjs/internal/testing/HotObservable';\nimport { ColdObservable } from 'rxjs/internal/testing/ColdObservable';\nexport var TestColdObservable = /*#__PURE__*/function (_Observable) {\n  _inherits(TestColdObservable, _Observable);\n\n  var _super = _createSuper(TestColdObservable);\n\n  function TestColdObservable(marbles, values, error) {\n    var _this;\n\n    _classCallCheck(this, TestColdObservable);\n\n    _this = _super.call(this);\n    _this.marbles = marbles;\n    _this.values = values;\n    _this.error = error;\n    var scheduler = getTestScheduler();\n    var messages = TestScheduler.parseMarbles(marbles, values, error, undefined, true);\n    var cold = new ColdObservable(messages, scheduler);\n    _this.source = cold;\n    scheduler.coldObservables.push(cold);\n    return _this;\n  }\n\n  _createClass(TestColdObservable, [{\n    key: \"getSubscriptions\",\n    value: function getSubscriptions() {\n      return this.source['subscriptions'];\n    }\n  }]);\n\n  return TestColdObservable;\n}(Observable);\nexport var TestHotObservable = /*#__PURE__*/function (_Observable2) {\n  _inherits(TestHotObservable, _Observable2);\n\n  var _super2 = _createSuper(TestHotObservable);\n\n  function TestHotObservable(marbles, values, error) {\n    var _this2;\n\n    _classCallCheck(this, TestHotObservable);\n\n    _this2 = _super2.call(this);\n    _this2.marbles = marbles;\n    _this2.values = values;\n    _this2.error = error;\n    var scheduler = getTestScheduler();\n    var messages = TestScheduler.parseMarbles(marbles, values, error, undefined, true);\n    var hot = new HotObservable(messages, scheduler);\n    _this2.source = hot;\n    scheduler.hotObservables.push(hot);\n    return _this2;\n  }\n\n  _createClass(TestHotObservable, [{\n    key: \"getSubscriptions\",\n    value: function getSubscriptions() {\n      return this.source['subscriptions'];\n    }\n  }]);\n\n  return TestHotObservable;\n}(Observable);","map":{"version":3,"sources":["../../../src/test-observables.ts"],"names":[],"mappings":";;;;AAAA,SAAS,UAAT,QAA2B,MAA3B;AAGA,SAAS,gBAAT,QAAiC,aAAjC;AACA,SAAS,aAAT,QAA8B,cAA9B;AACA,SAAS,aAAT,QAA8B,qCAA9B;AACA,SAAS,cAAT,QAA+B,sCAA/B;AAEA,WAAM,kBAAN;AAAA;;AAAA;;AACE,8BACS,OADT,EAES,MAFT,EAGS,KAHT,EAGoB;AAAA;;AAAA;;AAElB;AAJO,UAAA,OAAA,GAAA,OAAA;AACA,UAAA,MAAA,GAAA,MAAA;AACA,UAAA,KAAA,GAAA,KAAA;AAIP,QAAM,SAAS,GAAG,gBAAgB,EAAlC;AAEA,QAAM,QAAQ,GAAG,aAAa,CAAC,YAAd,CACf,OADe,EAEf,MAFe,EAGf,KAHe,EAIf,SAJe,EAKf,IALe,CAAjB;AAOA,QAAM,IAAI,GAAG,IAAI,cAAJ,CAAwB,QAAxB,EAAkC,SAAlC,CAAb;AACA,UAAK,MAAL,GAAc,IAAd;AACA,IAAA,SAAS,CAAC,eAAV,CAA0B,IAA1B,CAA+B,IAA/B;AAfkB;AAgBnB;;AApBH;AAAA;AAAA,uCAsBkB;AACd,aAAQ,KAAK,MAAL,CAAoB,eAApB,CAAR;AACD;AAxBH;;AAAA;AAAA,EAAwC,UAAxC;AA2BA,WAAM,iBAAN;AAAA;;AAAA;;AACE,6BACS,OADT,EAES,MAFT,EAGS,KAHT,EAGoB;AAAA;;AAAA;;AAElB;AAJO,WAAA,OAAA,GAAA,OAAA;AACA,WAAA,MAAA,GAAA,MAAA;AACA,WAAA,KAAA,GAAA,KAAA;AAIP,QAAM,SAAS,GAAG,gBAAgB,EAAlC;AAEA,QAAM,QAAQ,GAAG,aAAa,CAAC,YAAd,CACf,OADe,EAEf,MAFe,EAGf,KAHe,EAIf,SAJe,EAKf,IALe,CAAjB;AAOA,QAAM,GAAG,GAAG,IAAI,aAAJ,CAAuB,QAAvB,EAAiC,SAAjC,CAAZ;AACA,WAAK,MAAL,GAAc,GAAd;AACA,IAAA,SAAS,CAAC,cAAV,CAAyB,IAAzB,CAA8B,GAA9B;AAfkB;AAgBnB;;AApBH;AAAA;AAAA,uCAsBkB;AACd,aAAQ,KAAK,MAAL,CAAoB,eAApB,CAAR;AACD;AAxBH;;AAAA;AAAA,EAAuC,UAAvC","sourcesContent":["import { Observable } from 'rxjs';\nimport { SubscriptionLog } from 'rxjs/internal/testing/SubscriptionLog';\n\nimport { getTestScheduler } from './scheduler';\nimport { TestScheduler } from 'rxjs/testing';\nimport { HotObservable } from 'rxjs/internal/testing/HotObservable';\nimport { ColdObservable } from 'rxjs/internal/testing/ColdObservable';\n\nexport class TestColdObservable extends Observable<any> {\n  constructor(\n    public marbles: string,\n    public values?: any[],\n    public error?: any,\n  ) {\n    super();\n\n    const scheduler = getTestScheduler();\n\n    const messages = TestScheduler.parseMarbles(\n      marbles,\n      values,\n      error,\n      undefined,\n      true,\n    );\n    const cold = new ColdObservable<any>(messages, scheduler);\n    this.source = cold;\n    scheduler.coldObservables.push(cold);\n  }\n\n  getSubscriptions(): SubscriptionLog[] {\n    return (this.source as any)['subscriptions'];\n  }\n}\n\nexport class TestHotObservable extends Observable<any> {\n  constructor(\n    public marbles: string,\n    public values?: any[],\n    public error?: any,\n  ) {\n    super();\n\n    const scheduler = getTestScheduler();\n\n    const messages = TestScheduler.parseMarbles(\n      marbles,\n      values,\n      error,\n      undefined,\n      true,\n    );\n    const hot = new HotObservable<any>(messages, scheduler);\n    this.source = hot;\n    scheduler.hotObservables.push(hot);\n  }\n\n  getSubscriptions(): SubscriptionLog[] {\n    return (this.source as any)['subscriptions'];\n  }\n}\n\nexport type TestObservable = TestColdObservable | TestHotObservable;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}